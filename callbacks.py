"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""
import logging

import battles
import configs
import databases
import supports
import keyboards


def get_callback(bot, call, user_id) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±–µ–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
    :param bot: –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    :param call: –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–ª–ª–±–µ–∫–æ–º
    :param user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    :return:
    """
    if 'profile' == call.data:
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ')
        user_data = supports.get_user_info(user_id)
        bot.send_message(
            chat_id=call.message.chat.id,
            text=f'–ò–º—è –≥–µ—Ä–æ—è üßë: <b>{user_data['hero_name']}</b>\n'
                 f'–£—Ä–æ–≤–µ–Ω—å üèÜ: <b>{user_data['level']}</b>\n'
                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ üéØ: <b>{user_data['points']}</b>\n'
                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç üí∞: <b>{user_data['coins']}</b>\n'
                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π üóù: <b>{user_data['keys']}</b>\n'
                 f'–†–∞—Å–∞ üßù‚Äç‚ôÇÔ∏è: <b>{user_data['race']}</b>\n'
                 f'–ö–ª–∞—Å—Å ‚öúÔ∏è: <b>{user_data['hero_class']}</b>\n'
                 f'–¢–∏—Ç—É–ª üëë: <b>{user_data['title']}</b>\n',
            parse_mode='HTML'
        )
        return

    if 'inventory' == call.data:
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
        bot.send_message(chat_id=call.message.chat.id,
                         text='–ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö –≤–µ—â–∞—Ö –≤ —Ç–≤–æ–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. '
                              '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–¥–µ—Ç—ã–µ –Ω–∞ —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è –≤–µ—â–∏, –Ω–∞–∂–º–∏ <b>–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞</b>. '
                              '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –Ω–∞–¥–µ—Ç—ã–µ –≤–µ—â–∏, –Ω–∞–∂–º–∏ <b>–û—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>.',
                         reply_markup=keyboards.inventory_keyboard(),
                         parse_mode='HTML'
                         )
        return

    def create_message_inventory(call_data):
        """
        :param call_data: —Ç–∏–ø –∫–æ–ª–±–µ–∫–∞ ('equipment' –∏–ª–∏ 'other')
        :return:
        """
        result_inventory = databases.get_user_inventory(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–±–µ–∫–∞
        if call_data == 'equipment':
            bot.send_message(
                chat_id=call.message.chat.id,
                text='–¢–≤–æ—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞:'
            )
            target_state = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–¥–µ—Ç—ã–µ –≤–µ—â–∏
        if call_data == 'other':
            bot.send_message(
                chat_id=call.message.chat.id,
                text='–¢–≤–æ–∏ –≤–µ—â–∏ –ø—Ä–æ –∑–∞–ø–∞—Å:'
            )
            target_state = False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω–∞–¥–µ—Ç—ã–µ –≤–µ—â–∏

        for row_result_inventory in result_inventory:
            thing_id_for_call, thing_name, thing_type, description, bonus, state_active = row_result_inventory

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            if state_active != target_state:
                continue

            if state_active:
                state_active_str = '‚úÖ –î–∞'
                keyboard = keyboards.putout_keyboard(thing_id_for_call)
            if not state_active:
                state_active_str = '‚ùå –ù–µ—Ç'
                keyboard = keyboards.puton_keyboard(thing_id_for_call)

            bot.send_message(
                chat_id=call.message.chat.id,
                text=f'<b>{thing_name}</b>\n'
                     f'–¢–∏–ø ‚öîÔ∏è: {thing_type}\n'
                     f'–û–ø–∏—Å–∞–Ω–∏–µ üìú: {description}\n'
                     f'–ë–æ–Ω—É—Å –∫ —É—Ä–æ–≤–Ω—é ‚ûï: {bonus}\n'
                     f'–ù–∞–¥–µ—Ç–æ ü´Ö: {state_active_str}\n',
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        return

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    if (call.data == 'equipment') or (call.data == 'other'):
        create_message_inventory(call_data=call.data)

    if 'keys' == call.data:
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π')
        keys = supports.get_user_info(user_id)['keys']
        check, doors = supports.keys_checking(user_id)
        if check is True:
            bot.answer_callback_query(
                callback_query_id=call.id,
                text=f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π üóù: {keys}\n'
                     f'–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä–µ–π üö™: {int(doors)}',
                show_alert=True
            )
        else:
            bot.answer_callback_query(
                callback_query_id=call.id,
                text=f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π üóù: {keys}\n'
                     '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏ üò•',
                show_alert=True
            )
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π')
        return

    if 'rules' == call.data:
        bot.send_message(
            chat_id=call.message.chat.id,
            text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã "–ò–Ω–∂–µ–Ω–µ—Ä—Å–∫–∏–π –º–∞–Ω—á–∫–∏–Ω"'
        )
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞')
        return

    if 'dungeon' == call.data:
        logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –≤–æ–π—Ç–∏ –≤ –û—Ñ–∏—Å–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ')
        check, doors = supports.keys_checking(user_id)
        if check is True:
            user_data = supports.get_user_info(user_id)
            databases.open_door(user_id, configs.keys_for_open_door)
            battles.battle(user_id, user_data['hero_name'], user_data['level'], bot, call.message)
        else:
            bot.answer_callback_query(
                callback_query_id=call.id,
                text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏ üò•\n'
                     '–î–µ–ª–∞–π—Ç–µ –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏.',
                show_alert=True
            )
        return

    if ('puton' in call.data) or ('putout' in call.data):
        thing_str = call.data
        print(call.data)
        command, thing_id = thing_str.split('_')
        thing_id = int(thing_id)
        databases.change_thing_status(user_id, thing_id, command)
        if command == 'puton':
            bot.answer_callback_query(
                callback_query_id=call.id,
                text=f'–í–µ—â—å –Ω–∞–¥–µ—Ç–∞!',
                show_alert=True
            )
        if command == 'putout':
            bot.answer_callback_query(
                callback_query_id=call.id,
                text=f'–í–µ—â—å —Å–Ω—è—Ç–∞!',
                show_alert=True
            )

