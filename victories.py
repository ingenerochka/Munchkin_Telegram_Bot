"""
–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
"""
import random
import re

import telebot

import databases
import supports
import configs


def get_points(user_id: int, scores: int, bot: telebot.TeleBot, message: any) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç,
    –∫–∞–∫–æ–º—É —É—Ä–æ–≤–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤. –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    :param scores: –û—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
    :param bot: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –¢–µ–ª–µ–≥—Ä–∞–º
    :param message: –ë–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :return:
    """
    user_data = supports.get_user_info(user_id)
    current_points = user_data['points']
    current_level = user_data['level']
    new_points = current_points + scores
    databases.update_points(user_id, new_points)
    new_level = current_level
    for level in configs.levels_table.keys():
        if new_points in configs.levels_table[level]:
            new_level = level
    if new_level != current_level:
        databases.update_level(user_id, new_level)
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å <b>{new_level}</b> üéâ',
            parse_mode='HTML'
        )


def get_trophies(user_id: int, trophy_number: int, bot: telebot.TeleBot, message: any):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Å–æ–∫—Ä–æ–≤–∏—â–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    :param trophy_number: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Å–æ–∫—Ä–æ–≤–∏—â
    :param bot: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –¢–µ–ª–µ–≥—Ä–∞–º
    :param message: –ë–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :return:
    """
    user_data = supports.get_user_info(user_id)
    while trophy_number != 0:
        db_name = random.choice(['coins_data', 'races_classes_data', 'things_data'])
        trophy = databases.get_trophy(db_name)
        if db_name == 'coins_data':
            current_coins = user_data['coins']
            new_coins = current_coins + trophy[2]
            databases.update_coins(user_id, new_coins)
            bot.send_message(
                chat_id=message.chat.id,
                text=f'–¢—ã –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫, –∞ —Ç–∞–º <b>{trophy[1]}</b>\n'
                     f'–¢—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{trophy[2]}</b> –º–æ–Ω–µ—Ç ü™ô',
                parse_mode='HTML'
            )
        elif db_name == 'races_classes_data':
            type_race_class = trophy[1]
            new_race_class = trophy[2]
            databases.update_race_class(user_id, type_race_class, new_race_class)
            bot.send_message(
                chat_id=message.chat.id,
                text=f'–¢—ã –ø–æ–ª—É—á–∏–ª —Ä–∞—Å—É/–∫–ª–∞—Å—Å <b>{trophy[2]}</b>\n'
                     f'{trophy[3]}',
                parse_mode='HTML'
            )
        else:
            databases.add_thing(user_id, trophy)
            bot.send_message(
                chat_id=message.chat.id,
                text=f'–¢—ã –ø–æ–ª—É—á–∏–ª –≤–µ—â—å <b>{trophy[1]}</b>\n'
                     f'{trophy[3]}',
                parse_mode='HTML'
            )
        trophy_number -= 1


def get_escalation(user_id: int, escalation_id: int, escalation: str, bot: telebot.TeleBot, message: any):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–∏–ø —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–≥–æ –æ—Ç–Ω–∏–º–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –æ—á–∫–∏, —É—Ä–æ–≤–Ω–∏, –º–æ–Ω–µ—Ç—ã –∏–ª–∏ –≤–µ—â–∏.
    :param user_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    :param escalation_id: –¢–∏–ø —ç—Å–∫–∞–ª–∞—Ü–∏–∏, –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã–π —á–∏—Å–ª–æ–º
    :param escalation: –¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    :param bot: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –¢–µ–ª–µ–≥—Ä–∞–º
    :param message: –ë–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :return:
    """
    user_data = supports.get_user_info(user_id)
    if escalation_id == 1:
        minus_points = re.search(r'\d+', escalation)
        minus_points = int(minus_points.group())
        current_points = user_data['points']
        current_level = user_data['level']
        new_points = current_points - minus_points
        databases.update_points(user_id, new_points)
        new_level = current_level
        for level in configs.levels_table.keys():
            if new_points in configs.levels_table[level]:
                new_level = level
        if new_level != current_level:
            databases.update_level(user_id, new_level)
    elif escalation_id == 2:
        minus_level = re.search(r'\d+', escalation)
        minus_level = int(minus_level.group())
        current_level = user_data['level']
        new_level = current_level - minus_level
        databases.update_level(user_id, new_level)
    elif escalation_id == 3:
        minus_coins = re.search(r'\d+', escalation)
        minus_coins = int(minus_coins.group())
        current_coins = user_data['coins']
        new_coins = current_coins - minus_coins
        databases.update_coins(user_id, new_coins)
    else:
        del_thing_name = databases.lose_thing(user_id)
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–¢—ã –ø–æ—Ç–µ—Ä—è–ª –≤–µ—â—å <b>{del_thing_name}</b>',
            parse_mode='HTML'
        )

# TODO: —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–π - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –º–µ–Ω—å—à–µ –Ω—É–ª—è!


